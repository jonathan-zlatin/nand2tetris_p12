// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math 
{
    static array Iletter;
    static int leftOver;

        /** Initializes the library. */
        function void init() 
        {
            let Iletter = Array.new(16);
            do Math.createLetterMap();
            return;
        }

        function void createLetterMap()
        {
            // builds an array with 2 powers.
            var int i;

            let Iletter[0] = 1;
            let i = 1;
            while (i<16)
            {
                let Iletter[i] = Iletter[i-1] + Iletter[i-1];
                let i  = i + 1;
            }
            return;
        }
        
        function int IthBit(int number, int i)
        {
            // returns number's i'th bit.
            return (Iletter[i] & number);
        }
        /** Returns the absolute value of x. */
        function int abs(int x) 
        {
            if (x>0)
            {
                return x;
            }
            return -x;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) 
        {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum
            
            var int ShiftedX, sum, i;
            let ShiftedX = Math.abs(x);
            let sum = 0;
            let i = 0;
            
            while (i<16)
            {
                if (~(Math.IthBit(Math.abs(y) , i) = 0))
                {
                    let sum = sum + ShiftedX;
                }
                let ShiftedX = ^ShiftedX;
                let i = i + 1;
            }

            if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0)))
            {
                return -sum;
            }
            return sum;
        }

    function int dividePos(int x, int y) 
    {

        // divides only positive values.

        //pseudo code:
        // 1) divide(x,y)
        // 2) if (y>x) -> return 0;
        // 3) q = divide(x,2y)
        // 4) if((x-2qy)<y)
        // 5)     return 2q
        // 6) else
        // 7)     return 2q+1
        var int q;

        if ((y>x) | (y<0))
        {
            return 0;
        }   
        else
        {
            let leftOver = x;
            let q = Math.dividePos(x,^y);
            if (~(leftOver<y))
            {
                let leftOver = leftOver - y;
                return (^q)+1;
            }
            else
            {
                return (^q);
            }
        }
    }


        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) 
        {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            if (((x<0)&(y<0)) | ((x>0)&(y>0)))
            {
                return Math.dividePos(Math.abs(x),Math.abs(y));
            }
            return -(Math.dividePos(Math.abs(x),Math.abs(y)));
            
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) 
        {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            var int y, j, temp, twoTemp;
            let y = 0;
            let j = 7;

            while(~(j<0))
            {
                let temp = y + Iletter[j];
                let twoTemp = Math.squared(temp);
                if ( (~(twoTemp > x)) & (twoTemp > 0))
                {
                    let y = temp;
                }
                let j = j - 1;
            }
            return y;
        }

        function int squared(int x)
        {
            var int y;

            if(x = 0)
            {
                return 0;
            }
            let x = Math.abs(x);
            //calculate floor(x/2)
            let y = #x; //shift right x = x/2, floor'd
            //x is odd, so x*x = 4y*y + 4y + 1
            if (x & 1)
            {
                return (^(^y)) + 1 + (^(^Math.squared(y)));
            }
            else //if x is even, so x*x = 4y*y
            {
                return ^(^Math.squared(y));
            }
        }

        /** Returns the greater number. */
        function int max(int a, int b) 
        {
            if (a>b)
            {
                return a;
            }
            return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) 
        {
            if (a>b)
            {
                return b;
            }
            return a;
        }
}
