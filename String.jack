// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, maxlength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) 
    {
        if (maxLength = 0)
        {
            let str = Array.new(1);
        }
        else
        {
            let str = Array.new(maxLength);
        }
        let maxlength = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() 
    {
        do Memory.deAlloc(str);
        let length = 0;
        return;
    }

    /** Returns the current length of this string. */
    method int length() 
    {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) 
    {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) 
    {
        let str[j] = c; 
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) 
    {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() 
    {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() 
    {
        var int val, cur, ind, flag;
        let flag = 0;
        let val = 0;
        let ind = 0;
        let cur = 0;
        if (charAt(ind) = 45) // first char is '-'
        {
            let flag = 1;
            let ind = ind + 1;
        }
        while (ind < length)
        {
            let cur = charAt(ind) - 48;
            if (cur < 0 | cur > 9)
            {
                return returnVal(val, flag);
            }
            let val = val*10 + cur;
            let ind = ind + 1;
        }
        return returnVal(val, flag);
    }
    
    method int returnVal(int val, int flag)
    {
        if (flag = 1)
        {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) 
    {
        let length = 0;
        //checking if val is negative
        if (val < 0)
        {
            //need to add the negative sign 
            do appendChar(45);
            do int2String(-(val));
            return;
        }
        else
        {
            do int2String(val);
            return;
        }
        
    }

    method void int2String(int val)
    {
        var int lastdigit, c;
        let lastdigit = mod10(val);
        let c = lastdigit + 48; //48 ---> 57
        if (val < 10)
        {
            do appendChar(c);
            return;
        }
        do int2String(val/10);
        do appendChar(c);
        return;
    }
    
    method int mod10(int val)
    {
        var int ret;
        let ret = val - (10 * (val / 10));
        return ret;
    }


    /** Returns the new line character. */
    function char newLine() // returns the ASCII value.. 
    {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() // returns the ASCII value..
    {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() // returns the ASCII value..
    {
        return 34;
    }
}
