// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory 
{
    static Array ram;
    static Array freelist;
    /** Initializes the class. */
    function void init() 
    {
        let ram = 0;
        let freelist = 2048; //freeList = heapBase at 2048
        let freelist[0] = 14336; //freeList.length = heapLength --- size of block
        let freelist[1] = null; //freeList.next = null --- next block is null
        return;
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) 
    {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) 
    {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) 
    {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var Array curIndex, prevIndex;
        var int rem;
        let prevIndex = null;
        let curIndex = freelist;
        
        while ((~(curIndex = null)) & (~(curIndex[0] > size + 2)))
        {
            if (curIndex[0] = size + 1)
            {
                if (prevIndex = null)
                {
                    let freelist = curIndex[1]; 
                }
                else
                {
                    let prevIndex[1] = curIndex[1];
                }
                return curIndex + 1;
            }
            let prevIndex = curIndex;
            let curIndex = curIndex[1];
        }
        
        if (curIndex = null)
        {
            do Sys.error(6);
            return -1;
        }
        
        else //(curIndex[0] > size + 2)
        {
            let rem = curIndex[0] - (size + 1); // the remaining length 
            let curIndex[0] = rem; // decrease the size of the block
            let curIndex[rem] = size + 1; // update the size of the returned block
            return curIndex + rem + 1;
        }   
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) 
    {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        var Array segment;

        let segment = o - 1;
        let o[0] = freelist;
        let freelist = segment; 
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) 
    {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int max, counter;
        let counter = 0;
        let max = o[0];
        while (counter < o[-1])
        {
            if (o[counter] > max)
            {
                let max = o[counter];
            }
            let counter = counter + 1;
        }
        return max;
    }
}
